# Git Configuration
# ~/.gitconfig

[user]
	name = Connor
	email = loughondata@protonmail.com
	signingKey = 

[core]
    editor = hx
    
    excludesfile = ~/.gitignore_global
    
    # Treat spaces before tabs and all kinds of trailing whitespace as an error
    whitespace = space-before-tab,-indent-with-non-tab,trailing-space
    
    # Make `git rebase` safer on macOS
    trustctime = false
    
    # Prevent showing files whose names contain non-ASCII symbols as unversioned
    precomposeunicode = false
    
    # Speed up commands involving untracked files such as `git status`
    untrackedCache = true
    
    # Use delta for diffs (if installed)
    # pager = delta

[color]
    # Use colors in Git commands that are capable of colored output
    ui = auto

[color "branch"]
    current = yellow reverse
    local = yellow
    remote = green

[color "diff"]
    meta = yellow bold
    frag = magenta bold
    old = red
    new = green

[color "status"]
    added = green
    changed = yellow
    untracked = cyan

[alias]
    # Shortcuts
    s = status -s
    st = status
    co = checkout
    cob = checkout -b
    br = branch
    ci = commit
    cm = commit -m
    ca = commit --amend
    cam = commit --amend -m
    cane = commit --amend --no-edit
    
    # View abbreviated SHA, description, and history graph
    l = log --pretty=oneline -n 20 --graph --abbrev-commit
    ll = log --pretty=format:'%C(yellow)%h%Creset %C(blue)%d%Creset %s %C(green)(%cr) %C(bold blue)<%an>%Creset' --graph
    
    # View the current working tree status using the short format
    ss = status -s
    
    # Show verbose output about tags, branches or remotes
    tags = tag -l
    branches = branch --all
    remotes = remote --verbose
    
    # List aliases
    aliases = config --get-regexp alias
    
    # Show the diff between the latest commit and the current state
    d = diff
    dc = diff --cached
    ds = diff --staged
    
    # Pull in remote changes for the current repository and all its submodules
    p = pull --recurse-submodules
    
    # Push changes
    ps = push
    psf = push --force-with-lease
    
    # Interactive rebase with the given number of latest commits
    reb = "!r() { git rebase -i HEAD~$1; }; r"
    
    # Remove branches that have already been merged with main
    dm = "!git branch --merged | grep -v '\\*' | xargs -n 1 git branch -d"
    
    # List contributors with number of commits
    contributors = shortlog --summary --numbered
    
    # Show the user email for the current repository
    whoami = config user.email
    
    # Undo last commit (keep changes)
    undo = reset HEAD~1 --soft
    
    # Reset to last commit (discard changes)
    reset-hard = reset HEAD --hard
    
    # Stash shortcuts
    stsh = stash
    stash-all = stash --include-untracked
    stash-list = stash list
    stash-apply = stash apply
    
    # Find branches containing commit
    fb = "!f() { git branch -a --contains $1; }; f"
    
    # Find commits by commit message
    fm = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short --grep=$1; }; f"
    
    # Switch to a branch, creating it if necessary
    go = "!f() { git checkout -b \"$1\" 2> /dev/null || git checkout \"$1\"; }; f"
    
    # Show last commit
    last = log -1 HEAD
    
    # Show recent branches
    recent = branch --sort=-committerdate --format='%(HEAD) %(color:yellow)%(refname:short)%(color:reset) - %(color:green)(%(committerdate:relative))%(color:reset) - %(contents:subject) - %(authorname)'

[push]
    # Use the current branch when pushing (safer than matching)
    default = current
    
    # Make `git push` push relevant annotated tags when pushing branches
    followTags = true

[pull]
    # Rebase instead of merge when pulling
    rebase = true

[fetch]
    # Remove remote branches that no longer exist
    prune = true

[merge]
    # Include summaries of merged commits in newly created merge commit messages
    log = true
    
    # Use a better merge conflict style
    conflictstyle = diff3

[diff]
    # Detect copies as well as renames
    renames = copies
    
    # Use better diff algorithm
    algorithm = histogram

[diff "bin"]
    # Use `hexdump` to diff binary files
    textconv = hexdump -v -C

[help]
    # Automatically correct and execute mistyped commands
    autocorrect = 1

[init]
    # Set default branch name to main
    defaultBranch = main

[rebase]
    # Automatically stash/unstash before/after rebase
    autoStash = true
    
    # Automatically update dependent branches
    updateRefs = true

[commit]
	gpgSign = false
    # Sign commits with GPG (uncomment if you have GPG set up)
    # gpgsign = true
    
    # Use a template for commit messages
    # template = ~/.gitmessage

[credential]
    # Cache credentials for 15 minutes
    helper = cache --timeout=900

[url "git@github.com:"]
    # Use SSH for GitHub instead of HTTPS
    insteadOf = https://github.com/

[filter "lfs"]
    # Git LFS configuration
    clean = git-lfs clean -- %f
    smudge = git-lfs smudge -- %f
    process = git-lfs filter-process
    required = true
[gpg]
	format = 
	program = gpg
[tag]
	forceSignAnnotated = false
[gpg "ssh"]
	program = 
	allowedSignersFile = 
